generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://2WfRfvdCt5PVHcb.root:Vf6LhS6IZpo2UknE@gateway01.eu-central-1.prod.aws.tidbcloud.com:4000/test?connect_timeout=30&pool_timeout=30&socket_timeout=30&sslaccept=accept_invalid_certs"
}

model ChatPrompt {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  url           String
  description   String
  topic         Json
  submittedById String?   @map("user_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  submittedBy   User?     @relation(fields: [submittedById], references: [id])
  savedBy       User[]    @relation("saves")
  upvotedBy     User[]    @relation("upvotes")

  @@map("chatprompts")
}



model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Website {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("websites")
}

model User {
  id               String       @id @default(cuid())
  name             String?
  username         String?      @unique
  bio              String?
  email            String?      @unique
  emailVerified    DateTime?    @map("email_verified")
  image            String?
  websites         Website[]
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  accounts         Account[]
  submittedPrompts ChatPrompt[]
  sessions         Session[]
  savedPrompts     ChatPrompt[] @relation("saves")
  upvotedPrompts   ChatPrompt[] @relation("upvotes")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
